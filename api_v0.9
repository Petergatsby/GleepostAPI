API/V0.9

Note: Only available over HTTPS

Parameters can be form-encoded in a POST body, or sent as a query string


URL: https://gleepost.com/api/v0.9/

POST /register
required parameters: user, pass, email

example responses:
(HTTP 200)
{"id":143423424}
(HTTP 400)
{"error":"Invalid email"}


POST /login
required parameters: user, pass

example responses:
(HTTP 200) 
{"id":9, "value":"f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b", "expiry":"2013-09-05T14:53:34.226231725Z"}
(HTTP 400)
{"error":"Bad username/password"}


GET /posts?id=[user-id]&token=[token]&start=[count]
returns a list of 20 posts ordered by time, starting at count

example responses:
(HTTP 200)
[
	{
		"id":2,
		"by": {
			"id":9,
			"username":"Patrick"
		}
		"timestamp":"2013-09-05T13:09:38Z",
		"text":"This is a cool post for cool people!",
		"comments":4,
		"likes":5,
		"hates":3,
		"images": ["https://gleepost.com/uploads/7911970371089d6d59a8a056fe6580a0.jpg", "https://gleepost.com/uploads/3cdcbfbb3646709450d0fb25132ba681.jpg"]
	},
	{
		"id":1,
		"by": {
			"id":23,
			"username":"PeterGatsby"
		}
		"timestamp":"2013-09-05T13:09:38Z",
		"text":"Sailor Moon FTW!"
		"comments":9,
		"likes":0,
		"hates":3,
		"images": ["https://gleepost.com/uploads/7911970371089d6d59a8a056fe6580a0.jpg"]
	}
]


POST /posts
required parameters: id, token, text

example responses:
(http 200)
{"id":3}


GET /posts/[post-id]/comments?id=[user-id]&token=[token]&start=[count]

example responses:
(http 200)
[
	{
		"id":51341,
		"by": {
			"id":9,
			"username":"Patrick"
		},
		"timestamp":"2013-09-05T13:09:38Z",
		"text":"I concur."
	},
	{
		"id":4362346,
		"by": {
			"id":545,
			"username":"SomeoneElse"
		},
		"timestamp":"2013-09-05T13:09:38Z",
		"text":"Have you ever / ever felt like this? / How strange things happen / like you're going round the twist?"
	}
]


POST /posts/[post-id]/comments
required parameters: id, token, text

example responses:
(http 200)
{"id":234}


GET /conversations?id=[user-id]&token=[token]&start=[count]
returns a list of 20 of your conversations ordered by most recent message, starting at count

[
	{"id":1,
	"participants": [
		{"id":9, "username":"Patrick"},
		{"id":23, "username":"PeterGatsby"}
	],
	"mostRecentMessage": {"id":1234214, "by":{"id":9, "username":"Patrick"}, "text":"asl? ;)", "timestamp":"2013-09-05T13:09:38Z", "seen":false},
	},
	{"id":2,
	"participants" [
		{"id":99999, "username":"Lukas"},
		{"id":232515, "username":"Ling"}
	],
	"mostRecentMessage": {"id":123512624, "by":99999, "text":"idk lol", "timestamp":"2013-09-05T13:09:38Z", "seen":false}
	}
]


GET /conversations/[conversation-id]?id=[user-id]&token=[token]

example responses:
(HTTP 200)
{
	"id":1,
	"participants": [
		{"id":9, "username":"Patrick"},
		{"id":23, "username":"PeterGatsby"}
	],
	"messages": [
		{"id":1234214, "by":{"id":23, "username":"PeterGatsby"}, "text":"asl? ;)", "timestamp":"2013-09-05T13:09:38Z", "seen":false},
		{"id":1234214, "by":{"id":23, "username":"PeterGatsby"}, "text":"asl? ;)", "timestamp":"2013-09-05T13:09:38Z", "seen":false},
		{"id":1234214, "by":{"id":23, "username":"PeterGatsby"}, "text":"asl? ;)", "timestamp":"2013-09-05T13:09:38Z", "seen":false}
	]
}


GET /conversations/[conversation-id/messages?id=[user-id]&token=[token]&start=[count]
Returns a list of 20 messages ordered by time, starting at count

example responses:
[
		{"id":1234214, "by":9, "text":"asl? ;)", "timestamp":"2013-09-05T13:09:38Z", "seen":false},
		{"id":1234214, "by":9, "text":"asl? ;)", "timestamp":"2013-09-05T13:09:38Z", "seen":false},
		{"id":1234214, "by":9, "text":"asl? ;)", "timestamp":"2013-09-05T13:09:38Z", "seen":false}
]


POST /conversations/[conversation-id]/messages
required parameters: id, token, text

example responses:
{"id":1356}


GET /user/[user-id]?id=[user-id]&token=[token]

example responses:
{
	"id":9,
	"username":"Patrick",
	"tagline":"I like computers",
	"profile_image":"https://gleepost.com/uploads/35da2ca95be101a655961e37cc875b7b.png",
	"network": { "id":1, "name":"University of Leeds" },
	"course":"Computer Science"
}


POST /newconversation
required parameters: id, token

note: POST so it doesn't get accidentally repeated :)
This will return a conversation with two participants.

example responses:
{
	"id":2342342,
	"participants": [
		{"id":9, "username":"Patrick"},
		{"id":23, "username":"PeterGatsby"}
	]
}


POST /newgroupconversation
required parameters: id, token

note: POST so it doesn't get accidentally repeated :)
This will return a conversation with more than two participants.

example responses:
{
	"id":2342342,
	"participants": [
		{"id":9, "username":"Patrick"},
		{"id":23, "username":"PeterGatsby"},
		{"id":1351, "username":"Someone"},
		{"id":6124, "username":"SomeoneElse"}
	]
}

GET /longpoll?id=[user-id]&token=[token]
Gets a single message for the current user

This message could be from any conversation.

note: Will not respond until a message arrives for the current user or 60 seconds passes
at which point it will timeout

example responses:
{
	"id":53,
	"by": {"id":9,"username":"Patrick"},
	"text":"sup",
	"timestamp":"2013-09-16T16:58:30.771905595Z",
	"seen":false,
	"conversation_id":5
}
